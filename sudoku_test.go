package main

import (
	"testing"
)

func TestVerity(t *testing.T) {
	if duplicated([10]int{
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	}) {
		t.Fatal("not duplicated but failed")
	}
}

func TestVerify(t *testing.T) {

	{ //全部0かどうか
		//	fmt.Print("all 0 check")
		b := Board{
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
		}
		if !verify(b) {
			t.Fatal("not all 0")
		}

	}
	//行チェック
	{
		//	fmt.Print("gyo check")
		b := Board{
			{1, 1, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
		}
		if verify(b) {
			t.Fatal("not work gyo check")
		}
	}

	{
		//	fmt.Print("box check")
		b := Board{
			{1, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 1, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
		}
		if verify(b) {
			t.Fatal("not good 3x3check")
		}
	}

	{

		b := Board{
			{7, 8, 3, 1, 4, 2, 9, 0, 0},
			{5, 0, 0, 8, 7, 6, 0, 1, 4},
			{4, 0, 0, 3, 5, 9, 0, 8, 0},
			{8, 0, 0, 0, 0, 3, 0, 7, 2},
			{1, 6, 7, 0, 2, 8, 5, 0, 3},
			{0, 2, 0, 9, 6, 7, 0, 0, 0},
			{2, 0, 0, 0, 9, 5, 8, 3, 1},
			{0, 5, 8, 7, 0, 1, 4, 0, 0},
			{6, 3, 1, 0, 8, 0, 7, 5, 9},
		}

		/*b := Board{
			{0, 5, 0, 0, 8, 3, 0, 1, 7},
			{0, 0, 0, 1, 0, 0, 4, 0, 0},
			{3, 0, 4, 0, 0, 5, 6, 0, 8},
			{0, 0, 0, 0, 3, 0, 0, 0, 9},
			{0, 9, 0, 8, 2, 4, 5, 0, 0},
			{0, 0, 6, 0, 0, 0, 0, 7, 0},
			{0, 0, 9, 0, 0, 0, 0, 5, 0},
			{0, 0, 7, 2, 9, 0, 0, 8, 6},
			{1, 0, 3, 6, 0, 7, 2, 0, 4},
		}
		*/
		if !verify(b) {
			t.Fatal("not good input")
		}
		if !backtrack(&b) {
			t.Fatal("shold solve but failed")
		}
	}
}
